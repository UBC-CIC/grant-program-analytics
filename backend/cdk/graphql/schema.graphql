schema {
  query: Query
}

type CoCurricularReach {
  description: String
  estimated_reach: String
  funding_year: String
  grant_id: String
}

type CountByProjectType {
  Large: Int
  Small: Int
}

type Faculty {
  faculty_code: String
  faculty_name: String
}

type FacultyEngagement {
  funding_year: String
  grant_id: String
  member_campus: String
  member_faculty: String
  member_name: String
  member_other: String
  member_stream: String
  member_title: String
  member_unit: String
  project_faculty: String
  project_id: String
  project_type: String
}

type FacultyEngagementCount {
  Large: StreamCount
  Small: StreamCount
}

type FocusArea {
  label: String
  value: String
}

type IndividualSummary {
  description: String
  focus_areas: [String]
  funding_amount: String
  funding_year: String
  pi_name: String
  poster: String
  project_faculty: String
  project_outcome: String
  project_status: String
  project_type: String
  project_year: String
  report: String
  summary: String
  title: String
}

type NumProjectsAndGrants {
  grant: CountByProjectType
  project: CountByProjectType
}

type Project {
  department: String
  funding_amount: String
  funding_year: String
  grant_id: String
  pi_name: String
  project_faculty: String
  project_id: String
  project_type: String
}

type Proposal {
  co_applicants: String
  funding_amount: Float
  funding_year: Float
  grant_id: String
  pi_name: String
  pi_unit: String
  poster: String
  project_faculty: String
  project_id: String
  project_outcome: String
  project_status: String
  project_type: String
  project_year: Float
  report: String
  summary: String
  title: String
}

type Query {
  countDeclinedProjects(filter: Filter, method: String): CountByProjectType
  countFacultyMembersByStream(filter: Filter, method: String): FacultyEngagementCount
  countProjectsAndGrants(filter: Filter, method: String): NumProjectsAndGrants
  countTotalReachByFaculty(filter: Filter, method: String): StudentReachCount
  getFilteredProposals(filter: Filter, method: String): [Proposal]
  getIndividualSummaryInfo(grantId: String, method: String): [IndividualSummary]
  getSimilarProjects(grantId: String, method: String): [Proposal]
  getStudentReachByGrantId(grantId: String, method: String): [StudentReachByGrant]
  getStudentReachInfo(filter: Filter, method: String): StudentReachInfo
  getTeamMembersByGrantId(grantId: String, method: String): [TeamMembers]
  getUniqueStudent(fundingYear: String, method: String): UniqueStudent
  loadFaculty(method: String): [Faculty]
  loadFocusArea(method: String): [FocusArea]
}

type Reach {
  project_faculty: String
  reach: Int
}

type StreamCount {
  Admin: Int
  External: Int
  PDF: Int
  Research: Int
  Student: Int
  Teaching: Int
}

type StudentReach {
  course_faculty: String
  course_name: String
  course_type: String
  credits: String
  fte: String
  funding_year: String
  grant_id: String
  project_faculty: String
  project_id: String
  project_type: String
  reach: Float
  section: String
  session: String
  term: String
}

type StudentReachByGrant {
  grant_id: String
  reach: [StudentReach]
}

type StudentReachCount {
  Large: [Reach]
  Small: [Reach]
}

type StudentReachInfo {
  course: Int
  faculty: Int
  section: Int
}

type TeamMembers {
  grant_id: String
  members: [FacultyEngagement]
}

type UniqueStudent {
  funding_amount: Float
  funding_year: Float
  unique_student: Float
}

input Filter {
  focus_area: [String]
  funding_year: [String]
  project_faculty: [String]
  project_type: [String]
  search_text: [String]
}
