schema {
  query: Query
}

type CoCurricularReach {
  description: String
  estimated_reach: String
  funding_year: String
  grant_id: String
}

type CountByProjectType {
  Large: Int!
  Small: Int!
}

type FacultyEngagement {
  funding_year: String
  grant_id: String
  member_campus: String
  member_faculty: String
  member_name: String
  member_other: String
  member_stream: String
  member_title: String
  member_unit: String
  project_faculty: String
  project_id: String
  project_type: String
}

type FacultyEngagementCount {
  Large: StreamCount
  Small: StreamCount
}

type FocusArea {
  curriculum: Boolean
  diversity_and_inclusion: Boolean
  funding_amount: String
  funding_status: String
  funding_year: String
  grant_id: String
  indiginous_focused_curricula: Boolean
  infrastructure_development: Boolean
  innovative_assessment: Boolean
  pi_name: String
  project_faculty: String
  project_id: String
  project_type: String
  resourve_development: Boolean
  student_engagement: Boolean
  student_experience: Boolean
  teaching_roles_and_training: Boolean
  title: String
  work_integrated_learning: Boolean
}

type NumProjectsAndGrants {
  grant: CountByProjectType
  project: CountByProjectType
}

type Project {
  department: String
  funding_amount: String
  funding_year: String
  grant_id: String
  pi_name: String
  project_faculty: String
  project_id: String
  project_type: String
}

type Proposal {
  amount: String
  co_applicants: String
  focus_area: String
  grant_id: String
  pi_email: String
  pi_name: String
  pi_role: String
  pi_title: String
  project_faculty: String
  project_year: String
  summary: String
  title: String
}

type Query {
  countDeclinedProjects(filter: Filter, method: String): CountByProjectType
  countFacultyMembersByStream(filter: Filter, method: String): FacultyEngagementCount
  countProjectsAndGrants(filter: Filter, method: String): NumProjectsAndGrants
  countTotalReachByFaculty(filter: Filter, method: String): StudentReachCount
  getAllProjects(method: String): [Project]
  getCoCurricularReachById(grantId: String, method: String): CoCurricularReach
  getFilteredProjects(filter: Filter, method: String): [Project]
  getFilteredProposals(filter: Filter, method: String): [Proposal]
  getStudentReachInfo(filter: Filter, method: String): StudentReachInfo
  proposals(method: String): [Proposal]
}

type Reach {
  project_faculty: String
  reach: Int
}

type StreamCount {
  Admin: Int
  External: Int
  PDF: Int
  Research: Int
  Student: Int
  Teaching: Int
}

type StudentReach {
  course_faculty: String
  course_name: String
  course_type: String
  credits: String
  fte: String
  funding_year: String
  grant_id: String
  project_faculty: String
  project_id: String
  project_type: String
  reach: String
  section: String
  session: String
  term: String
}

type StudentReachCount {
  Large: [Reach]
  Small: [Reach]
}

type StudentReachInfo {
  course: Int!
  faculty: Int!
  section: Int!
}

input Filter {
  focus_area: [String]
  funding_year: [String]
  project_faculty: [String]
  project_type: [String]
  search_text: [String]
}
